============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0 -- D:\Code\stock_rule_based\venv\Scripts\python.exe
cachedir: .pytest_cache
rootdir: D:\Code\stock_rule_based
configfile: pyproject.toml
plugins: cov-6.2.1
collecting ... collected 353 items

tests/test_backtester.py::TestBacktester::test_init_default_parameters PASSED [  0%]
tests/test_backtester.py::TestBacktester::test_init_custom_parameters PASSED [  0%]
tests/test_backtester.py::TestBacktester::test_generate_signals_empty_type_field PASSED [  0%]
tests/test_backtester.py::TestBacktester::test_generate_signals_sma_crossover PASSED [  1%]
tests/test_backtester.py::TestBacktester::test_generate_signals_invalid_rule PASSED [  1%]
tests/test_backtester.py::TestBacktester::test_generate_signals_missing_parameters PASSED [  1%]
tests/test_backtester.py::TestBacktester::test_find_optimal_strategies_no_trades PASSED [  1%]
tests/test_backtester.py::TestBacktester::test_atr_exit_signal_generation PASSED [  2%]
tests/test_backtester.py::TestBacktester::test_generate_exit_signals_with_atr PASSED [  2%]
tests/test_backtester.py::TestBacktester::test_track_entry_prices PASSED [  2%]
tests/test_backtester.py::TestBacktesterIntegration::test_find_optimal_strategies_basic_flow PASSED [  3%]
tests/test_backtester.py::TestBacktesterIntegration::test_generate_exit_signals_multiple_stop_loss PASSED [  3%]
tests/test_backtester.py::TestBacktesterIntegration::test_generate_exit_signals_multiple_take_profit PASSED [  3%]
tests/test_backtester.py::TestBacktesterIntegration::test_generate_exit_signals_indicator_rule_exception PASSED [  3%]
tests/test_backtester.py::TestBacktesterIntegration::test_find_optimal_strategies_no_baseline_rule PASSED [  4%]
tests/test_backtester.py::TestBacktesterIntegration::test_find_optimal_strategies_infer_freq_none PASSED [  4%]
tests/test_backtester.py::TestBacktesterIntegration::test_find_optimal_strategies_intraday_data_ffill PASSED [  4%]
tests/test_backtester.py::TestBacktesterIntegration::test_find_optimal_strategies_successful_freq_inference PASSED [  5%]
tests/test_backtester.py::TestBacktesterIntegration::test_find_optimal_strategies_with_sell_conditions_logging PASSED [  5%]
tests/test_backtester.py::TestBacktesterIntegration::test_find_optimal_strategies_empty_signals PASSED [  5%]
tests/test_backtester.py::TestBacktesterIntegration::test_find_optimal_strategies_zero_trades_after_signals PASSED [  5%]
tests/test_backtester.py::TestBacktesterIntegration::test_find_optimal_strategies_total_trades_zero PASSED [  6%]
tests/test_backtester.py::TestBacktesterIntegration::test_find_optimal_strategies_exception_in_processing PASSED [  6%]
tests/test_backtester.py::TestBacktesterFixtures::test_sample_backtest_data_fixture PASSED [  6%]
tests/test_cli_advanced.py::test_run_command_with_persistence PASSED     [  7%]
tests/test_cli_advanced.py::test_run_command_persistence_failure_handling PASSED [  7%]
tests/test_cli_advanced.py::test_run_command_backtest_value_error PASSED [  7%]
tests/test_cli_advanced.py::test_run_command_file_not_found_in_backtest PASSED [  7%]
tests/test_cli_advanced.py::test_run_command_backtest_generic_exception_verbose PASSED [  8%]
tests/test_cli_advanced.py::test_run_command_report_generation_fails_warning PASSED [  8%]
tests/test_cli_advanced.py::test_analyze_rules_command PASSED            [  8%]
tests/test_cli_advanced.py::test_analyze_rules_db_not_found PASSED       [  9%]
tests/test_cli_advanced.py::test_analyze_rules_no_strategies_found PASSED [  9%]
tests/test_cli_advanced.py::test_analyze_rules_exception_handling PASSED [  9%]
tests/test_cli_advanced.py::test_analyze_strategies_command_success PASSED [  9%]
tests/test_cli_advanced.py::test_analyze_strategies_command_custom_output PASSED [ 10%]
tests/test_cli_advanced.py::test_analyze_strategies_command_no_database PASSED [ 10%]
tests/test_cli_advanced.py::test_analyze_strategies_command_no_data PASSED [ 10%]
tests/test_cli_advanced.py::test_analyze_strategies_command_error_handling PASSED [ 11%]
tests/test_cli_basic.py::test_run_command_help PASSED                    [ 11%]
tests/test_cli_basic.py::test_display_results_empty PASSED               [ 11%]
tests/test_cli_basic.py::test_run_command_basic PASSED                   [ 11%]
tests/test_cli_basic.py::test_run_command_verbose PASSED                 [ 12%]
tests/test_cli_basic.py::test_run_command_freeze_date PASSED             [ 12%]
tests/test_cli_basic.py::test_run_command_success PASSED                 [ 12%]
tests/test_cli_basic.py::test_run_command_invalid_freeze_date PASSED     [ 13%]
tests/test_cli_basic.py::test_run_command_no_config PASSED               [ 13%]
tests/test_cli_basic.py::test_run_command_missing_rules PASSED           [ 13%]
tests/test_cli_basic.py::test_run_command_insufficient_data_handling PASSED [ 13%]
tests/test_cli_coverage.py::TestCLIHelperFunctions::test_show_banner_function PASSED [ 14%]
tests/test_cli_coverage.py::TestCLIHelperFunctions::test_create_progress_context PASSED [ 14%]
tests/test_cli_coverage.py::TestClearAndRecalculateCommand::test_clear_and_recalculate_success PASSED [ 14%]
tests/test_cli_coverage.py::TestClearAndRecalculateCommand::test_clear_and_recalculate_db_not_found PASSED [ 15%]
tests/test_cli_coverage.py::TestClearAndRecalculateCommand::test_clear_and_recalculate_with_freeze_date PASSED [ 15%]
tests/test_cli_coverage.py::TestAnalyzeSymbolHelperFunction::test_analyze_symbol_none_price_data PASSED [ 15%]
tests/test_cli_coverage.py::TestAnalyzeSymbolHelperFunction::test_analyze_symbol_insufficient_data PASSED [ 15%]
tests/test_cli_coverage.py::TestPerformanceMonitoringPaths::test_run_command_with_performance_summary PASSED [ 16%]
tests/test_cli_coverage.py::TestLogFileCreationErrorHandling::test_run_command_log_file_error_handling PASSED [ 16%]
tests/test_cli_coverage.py::TestLogFileCreationErrorHandling::test_analyze_strategies_log_file_error_handling PASSED [ 16%]
tests/test_cli_coverage.py::TestDisplayResultsFunction::test_display_results_with_strategies PASSED [ 16%]
tests/test_cli_coverage.py::TestMainCallbackEdgeCases::test_main_callback_resilient_parsing PASSED [ 17%]
tests/test_cli_coverage.py::TestMainCallbackEdgeCases::test_main_callback_config_loading_error PASSED [ 17%]
tests/test_cli_coverage.py::TestClearAndRecalculateErrorHandling::test_clear_and_recalculate_exception_handling PASSED [ 17%]
tests/test_cli_coverage.py::TestClearAndRecalculateErrorHandling::test_clear_and_recalculate_log_file_error PASSED [ 18%]
tests/test_cli_coverage.py::TestProcessAndSaveResultsFunction::test_process_and_save_results_with_rules_model_dump PASSED [ 18%]
tests/test_cli_coverage.py::TestProcessAndSaveResultsFunction::test_process_and_save_results_without_model_dump PASSED [ 18%]
tests/test_config.py::test_config_model_valid PASSED                     [ 18%]
tests/test_config.py::test_config_model_invalid_weights PASSED           [ 19%]
tests/test_config.py::test_load_config_missing_file PASSED               [ 19%]
tests/test_config.py::test_config_universe_path_is_dir PASSED            [ 19%]
tests/test_config.py::test_load_config_invalid_yaml PASSED               [ 20%]
tests/test_config.py::test_load_config_empty_file PASSED                 [ 20%]
tests/test_config.py::test_load_rules_invalid_structure_pydantic[layers: []-Field required] PASSED [ 20%]
tests/test_config.py::test_load_rules_invalid_structure_pydantic[baseline: 123-Input should be a valid dictionary] PASSED [ 20%]
tests/test_config.py::test_load_rules_invalid_structure_pydantic[baseline: {}\nlayers: {}-Field required] PASSED [ 21%]
tests/test_config.py::test_load_rules_invalid_structure_pydantic[baseline: {name: a, type: b, params: {}}\nlayers: {}-Input should be a valid list] PASSED [ 21%]
tests/test_config.py::test_load_rules_missing_file PASSED                [ 21%]
tests/test_config.py::test_load_rules_invalid_yaml PASSED                [ 22%]
tests/test_config.py::test_load_rules_empty_file PASSED                  [ 22%]
tests/test_data_advanced.py::TestDataAdvancedFunctions::test_get_price_data_missing_cache PASSED [ 22%]
tests/test_data_advanced.py::TestDataAdvancedFunctions::test_refresh_market_data_freeze_mode PASSED [ 22%]
tests/test_data_advanced.py::TestDataAdvancedFunctions::test_refresh_market_data_success PASSED [ 23%]
tests/test_data_advanced.py::TestDataAdvancedFunctions::test_fetch_symbol_data_multiindex_columns PASSED [ 23%]
tests/test_data_advanced.py::TestDataAdvancedFunctions::test_fetch_symbol_data_tuple_columns PASSED [ 23%]
tests/test_data_advanced.py::TestDataAdvancedFunctions::test_refresh_market_data_fetch_failure PASSED [ 24%]
tests/test_data_advanced.py::TestDataAdvancedFunctions::test_refresh_market_data_validation_failure PASSED [ 24%]
tests/test_data_advanced.py::TestDataAdvancedFunctions::test_get_price_data_fetch_fails PASSED [ 24%]
tests/test_data_advanced.py::TestDataAdvancedFunctions::test_fetch_symbol_data_empty_df PASSED [ 24%]
tests/test_data_advanced.py::TestDataAdvancedFunctions::test_fetch_symbol_data_missing_columns PASSED [ 25%]
tests/test_data_advanced.py::TestDataAdvancedFunctions::test_fetch_symbol_data_api_exception PASSED [ 25%]
tests/test_data_advanced.py::TestDataAdvancedFunctions::test_fetch_and_store_data_fetch_fails PASSED [ 25%]
tests/test_data_advanced.py::TestDataAdvancedFunctions::test_fetch_and_store_data_validation_fails PASSED [ 26%]
tests/test_data_advanced.py::TestDataAdvancedFunctions::test_fetch_and_store_data_save_fails PASSED [ 26%]
tests/test_data_advanced.py::TestDataAdvancedFunctions::test_refresh_market_data_with_list PASSED [ 26%]
tests/test_data_basic.py::TestDataBasicFunctions::test_load_universe PASSED [ 26%]
tests/test_data_basic.py::TestDataBasicFunctions::test_load_universe_missing_file PASSED [ 27%]
tests/test_data_basic.py::TestDataBasicFunctions::test_load_universe_malformed PASSED [ 27%]
tests/test_data_basic.py::TestDataBasicFunctions::test_add_ns_suffix PASSED [ 27%]
tests/test_data_basic.py::TestDataBasicFunctions::test_needs_refresh_missing_file PASSED [ 28%]
tests/test_data_basic.py::TestDataBasicFunctions::test_needs_refresh_fresh_file PASSED [ 28%]
tests/test_data_basic.py::TestDataBasicFunctions::test_needs_refresh_stale_file PASSED [ 28%]
tests/test_data_basic.py::TestDataBasicFunctions::test_validate_data_quality_good_data PASSED [ 28%]
tests/test_data_basic.py::TestDataBasicFunctions::test_validate_data_quality_negative_prices PASSED [ 29%]
tests/test_data_basic.py::TestDataBasicFunctions::test_validate_data_quality_zero_volume PASSED [ 29%]
tests/test_data_basic.py::TestDataBasicFunctions::test_validate_data_quality_empty_df PASSED [ 29%]
tests/test_data_basic.py::TestDataBasicFunctions::test_validate_data_quality_large_gap PASSED [ 30%]
tests/test_data_basic.py::TestDataBasicFunctions::test_save_and_load_symbol_cache PASSED [ 30%]
tests/test_data_basic.py::TestDataBasicFunctions::test_save_symbol_cache_exception PASSED [ 30%]
tests/test_data_basic.py::TestDataBasicFunctions::test_load_symbol_cache_with_unnamed_col PASSED [ 30%]
tests/test_data_basic.py::TestDataBasicFunctions::test_load_symbol_cache_with_date_as_first_col PASSED [ 31%]
tests/test_data_basic.py::TestDataBasicFunctions::test_get_price_data_with_date_filtering PASSED [ 31%]
tests/test_data_basic.py::TestDataBasicFunctions::test_get_price_data_with_start_and_end_date PASSED [ 31%]
tests/test_data_basic.py::TestDataBasicFunctions::test_get_price_data_with_freeze_date PASSED [ 32%]
tests/test_data_basic.py::TestDataBasicFunctions::test_get_price_data_freeze_mode_no_cache PASSED [ 32%]
tests/test_data_basic.py::TestDataBasicFunctions::test_get_price_data_no_data_in_range PASSED [ 32%]
tests/test_data_basic.py::TestDataBasicFunctions::test_get_price_data_limited_data_warning PASSED [ 32%]
tests/test_data_basic.py::TestDataBasicFunctions::test_needs_refresh_os_error PASSED [ 33%]
tests/test_integration_backtester.py::TestBacktesterRuleIntegration::test_rule_function_lookup PASSED [ 33%]
tests/test_integration_backtester.py::TestBacktesterRuleIntegration::test_rule_parameter_validation PASSED [ 33%]
tests/test_integration_backtester.py::TestBacktesterRuleIntegration::test_backtester_with_real_rules PASSED [ 33%]
tests/test_integration_cli.py::TestCLIIntegration::test_config_loading_integration PASSED [ 34%]
tests/test_integration_cli.py::TestCLIIntegration::test_data_loading_integration PASSED [ 34%]
tests/test_integration_cli.py::TestCLIIntegration::test_end_to_end_cli_workflow PASSED [ 34%]
tests/test_integration_cli.py::TestCLIIntegration::test_error_handling_integration PASSED [ 35%]
tests/test_performance.py::test_performance_monitor_context_manager PASSED [ 35%]
tests/test_performance.py::test_performance_monitor_decorator PASSED     [ 35%]
tests/test_performance.py::test_get_summary PASSED                       [ 35%]
tests/test_performance.py::test_get_summary_empty PASSED                 [ 36%]
tests/test_performance.py::test_duration_warning PASSED                  [ 36%]
tests/test_performance.py::test_global_monitor_instance PASSED           [ 36%]
tests/test_performance.py::test_performance_benchmark_simulation PASSED  [ 37%]
tests/test_persistence.py::TestCreateDatabase::test_create_database_success PASSED [ 37%]
tests/test_persistence.py::TestCreateDatabase::test_create_database_idempotent PASSED [ 37%]
tests/test_persistence.py::TestCreateDatabase::test_create_database_failure PASSED [ 37%]
tests/test_persistence.py::TestSaveStrategiesBatch::test_save_strategies_batch_success PASSED [ 38%]
tests/test_persistence.py::TestSaveStrategiesBatch::test_save_strategies_batch_empty_list PASSED [ 38%]
tests/test_persistence.py::TestSaveStrategiesBatch::test_save_strategies_batch_transaction_rollback PASSED [ 38%]
tests/test_persistence.py::TestSaveStrategiesBatch::test_save_strategies_batch_invalid_rule_stack PASSED [ 39%]
tests/test_persistence.py::TestSaveStrategiesBatch::test_save_strategies_batch_with_closed_connection PASSED [ 39%]
tests/test_persistence.py::TestSaveStrategiesBatch::test_save_strategies_batch_insert_error PASSED [ 39%]
tests/test_persistence.py::TestSaveStrategiesBatch::test_save_strategies_batch_with_numpy_int PASSED [ 39%]
tests/test_persistence.py::TestGetOpenPositions::test_get_open_positions_success PASSED [ 40%]
tests/test_persistence.py::TestGetOpenPositions::test_get_open_positions_empty PASSED [ 40%]
tests/test_persistence.py::TestGetOpenPositions::test_get_open_positions_db_error PASSED [ 40%]
tests/test_persistence.py::TestClosePositionsBatch::test_close_positions_batch_success PASSED [ 41%]
tests/test_persistence.py::TestClosePositionsBatch::test_close_positions_batch_empty_list PASSED [ 41%]
tests/test_persistence.py::TestClosePositionsBatch::test_close_positions_batch_db_error PASSED [ 41%]
tests/test_persistence.py::TestAddPositions::test_add_new_position_skips_existing_open PASSED [ 41%]
tests/test_persistence.py::TestAddPositions::test_add_new_positions_empty_list PASSED [ 42%]
tests/test_persistence.py::TestAddPositions::test_add_new_positions_db_error PASSED [ 42%]
tests/test_persistence.py::TestAddPositions::test_save_strategies_multiple_batches PASSED [ 42%]
tests/test_persistence.py::TestIntegration::test_create_and_save_workflow PASSED [ 43%]
tests/test_persistence.py::TestMigrationV2::test_migrate_strategies_table_v2_fresh_database PASSED [ 43%]
tests/test_persistence.py::TestMigrationV2::test_migrate_strategies_table_v2_with_existing_data PASSED [ 43%]
tests/test_persistence.py::TestMigrationV2::test_migrate_strategies_table_v2_idempotent PASSED [ 43%]
tests/test_persistence.py::TestMigrationV2::test_config_functions PASSED [ 44%]
tests/test_persistence.py::TestClearAndRecalculateStrategies::test_clear_and_recalculate_basic_functionality PASSED [ 44%]
tests/test_persistence.py::TestClearAndRecalculateStrategies::test_clear_and_recalculate_with_existing_data PASSED [ 44%]
tests/test_persistence.py::TestClearAndRecalculateStrategies::test_clear_and_recalculate_with_successful_backtesting PASSED [ 45%]
tests/test_persistence.py::TestClearAndRecalculateStrategies::test_clear_and_recalculate_error_handling PASSED [ 45%]
tests/test_persistence.py::TestGetConnectionEdgeCases::test_get_connection_with_migration_needed PASSED [ 45%]
tests/test_persistence.py::TestGetConnectionEdgeCases::test_get_connection_database_error PASSED [ 45%]
tests/test_persistence.py::TestGetConnectionEdgeCases::test_get_connection_already_migrated PASSED [ 46%]
tests/test_persistence.py::TestCreateDatabaseEdgeCases::test_create_database_parent_directory_creation PASSED [ 46%]
tests/test_persistence.py::TestCreateDatabaseEdgeCases::test_create_database_oserror PASSED [ 46%]
tests/test_persistence.py::TestConfigHashAndSnapshot::test_generate_config_hash_deterministic PASSED [ 47%]
tests/test_persistence.py::TestConfigHashAndSnapshot::test_generate_config_hash_different_configs PASSED [ 47%]
tests/test_persistence.py::TestConfigHashAndSnapshot::test_create_config_snapshot_with_freeze_date PASSED [ 47%]
tests/test_persistence.py::TestConfigHashAndSnapshot::test_create_config_snapshot_without_freeze_date PASSED [ 47%]
tests/test_persistence.py::TestSaveStrategiesBatchEdgeCases::test_save_strategies_batch_with_pydantic_models PASSED [ 48%]
tests/test_persistence.py::TestSaveStrategiesBatchEdgeCases::test_save_strategies_batch_assertion_errors PASSED [ 48%]
tests/test_persistence.py::TestAddNewPositionsFromSignalsEdgeCases::test_add_positions_with_rule_stack_json PASSED [ 48%]
tests/test_persistence.py::TestAddNewPositionsFromSignalsEdgeCases::test_add_positions_fallback_rule_stack PASSED [ 49%]
tests/test_persistence.py::TestMigrateStrategiesTableV2EdgeCases::test_migrate_v2_with_data_and_pragma_check PASSED [ 49%]
tests/test_persistence.py::TestMigrateStrategiesTableV2EdgeCases::test_migrate_v2_error_handling FAILED [ 49%]
tests/test_persistence.py::TestAdditionalPersistenceFunctions::test_close_positions_transaction_rollback FAILED [ 49%]
tests/test_persistence.py::TestAdditionalPersistenceFunctions::test_add_positions_transaction_rollback FAILED [ 50%]
tests/test_reporter_advanced.py::TestIdentifyNewSignalsEdgeCases::test_identify_signals_data_load_failure_or_empty PASSED [ 50%]
tests/test_reporter_advanced.py::TestIdentifyNewSignalsEdgeCases::test_identify_signals_json_decode_error PASSED [ 50%]
tests/test_reporter_advanced.py::TestIdentifyNewSignalsEdgeCases::test_identify_signals_rule_stack_not_list PASSED [ 50%]
tests/test_reporter_advanced.py::TestIdentifyNewSignalsEdgeCases::test_identify_signals_empty_rule_stack_list PASSED [ 51%]
tests/test_reporter_advanced.py::TestIdentifyNewSignalsEdgeCases::test_identify_signals_rule_def_not_dict PASSED [ 51%]
tests/test_reporter_advanced.py::TestIdentifyNewSignalsEdgeCases::test_identify_signals_unexpected_error_in_processing PASSED [ 51%]
tests/test_reporter_advanced.py::TestReportFormatting::test_format_new_buys_table_empty PASSED [ 52%]
tests/test_reporter_advanced.py::TestReportFormatting::test_format_open_positions_table_empty PASSED [ 52%]
tests/test_reporter_advanced.py::TestReportFormatting::test_format_sell_positions_table_empty PASSED [ 52%]
tests/test_reporter_advanced.py::TestReportFormatting::test_format_open_positions_table_with_na PASSED [ 52%]
tests/test_reporter_advanced.py::TestGenerateDailyReport::test_generate_report_with_positions PASSED [ 53%]
tests/test_reporter_advanced.py::TestGenerateDailyReport::test_generate_report_file_write_error PASSED [ 53%]
tests/test_reporter_advanced.py::TestGenerateDailyReport::test_generate_report_generic_exception PASSED [ 53%]
tests/test_reporter_advanced.py::TestGenerateDailyReport::test_generate_report_error_processing_position PASSED [ 54%]
tests/test_reporter_advanced.py::TestRulePerformanceAnalysis::test_analyze_rule_performance PASSED [ 54%]
tests/test_reporter_advanced.py::TestRulePerformanceAnalysis::test_format_rule_analysis_as_md PASSED [ 54%]
tests/test_reporter_advanced.py::TestRulePerformanceAnalysis::test_analyze_rule_performance_db_error PASSED [ 54%]
tests/test_reporter_advanced.py::TestStrategyPerformanceAnalysis::test_analyze_strategy_performance_basic PASSED [ 55%]
tests/test_reporter_advanced.py::TestStrategyPerformanceAnalysis::test_format_strategy_analysis_as_md PASSED [ 55%]
tests/test_reporter_advanced.py::TestStrategyPerformanceAnalysis::test_format_strategy_analysis_as_csv PASSED [ 55%]
tests/test_reporter_advanced.py::TestStrategyPerformanceAnalysis::test_format_strategy_analysis_as_csv_empty PASSED [ 56%]
tests/test_reporter_core.py::TestFetchBestStrategies::test_fetch_strategies_success PASSED [ 56%]
tests/test_reporter_core.py::TestFetchBestStrategies::test_fetch_strategies_threshold_filtering PASSED [ 56%]
tests/test_reporter_core.py::TestFetchBestStrategies::test_fetch_strategies_no_results PASSED [ 56%]
tests/test_reporter_core.py::TestFetchBestStrategies::test_fetch_strategies_database_error PASSED [ 57%]
tests/test_reporter_core.py::TestFetchBestStrategies::test_fetch_strategies_generic_exception PASSED [ 57%]
tests/test_reporter_core.py::TestReportFormatting::test_format_new_buys_table_empty PASSED [ 57%]
tests/test_reporter_core.py::TestReportFormatting::test_format_open_positions_table_empty PASSED [ 58%]
tests/test_reporter_core.py::TestReportFormatting::test_format_sell_positions_table_empty PASSED [ 58%]
tests/test_reporter_core.py::TestReportFormatting::test_format_open_positions_table_with_na PASSED [ 58%]
tests/test_reporter_core.py::TestFindSignalsInWindow::test_single_rule_with_signal PASSED [ 58%]
tests/test_reporter_core.py::TestFindSignalsInWindow::test_multiple_rules_and_logic PASSED [ 59%]
tests/test_reporter_core.py::TestFindSignalsInWindow::test_no_signals_produced PASSED [ 59%]
tests/test_reporter_core.py::TestFindSignalsInWindow::test_empty_data_or_rules PASSED [ 59%]
tests/test_reporter_core.py::TestIdentifyNewSignalsWithWindow::test_finds_signal_within_hold_period PASSED [ 60%]
tests/test_reporter_core.py::TestIdentifyNewSignalsWithWindow::test_ignores_signal_outside_hold_period PASSED [ 60%]
tests/test_reporter_core.py::TestIdentifyNewSignalsWithWindow::test_finds_multiple_recent_signals PASSED [ 60%]
tests/test_reporter_core.py::TestCheckExitConditions::test_stop_loss_triggered PASSED [ 60%]
tests/test_reporter_core.py::TestCheckExitConditions::test_take_profit_triggered PASSED [ 61%]
tests/test_reporter_core.py::TestCheckExitConditions::test_indicator_exit_triggered PASSED [ 61%]
tests/test_reporter_core.py::TestCheckExitConditions::test_indicator_exit_rule_error PASSED [ 61%]
tests/test_reporter_core.py::TestCheckExitConditions::test_time_based_exit_triggered PASSED [ 62%]
tests/test_reporter_core.py::TestCheckExitConditions::test_no_exit_condition_met PASSED [ 62%]
tests/test_reporter_core.py::TestCheckExitConditions::test_exit_priority_sl_over_tp PASSED [ 62%]
tests/test_reporter_core.py::TestCheckExitConditions::test_exit_priority_indicator_over_time PASSED [ 62%]
tests/test_reporter_coverage.py::TestDatabaseErrorHandling::test_fetch_best_strategies_connection_error PASSED [ 63%]
tests/test_reporter_coverage.py::TestDatabaseErrorHandling::test_fetch_best_strategies_sql_error PASSED [ 63%]
tests/test_reporter_coverage.py::TestDatabaseErrorHandling::test_analyze_rule_performance_db_error PASSED [ 63%]
tests/test_reporter_coverage.py::TestDatabaseErrorHandling::test_analyze_strategy_performance_db_error PASSED [ 64%]
tests/test_reporter_coverage.py::TestDatabaseErrorHandling::test_analyze_strategy_performance_aggregated_db_error PASSED [ 64%]
tests/test_reporter_coverage.py::TestJsonParsingErrors::test_identify_new_signals_json_decode_error PASSED [ 64%]
tests/test_reporter_coverage.py::TestJsonParsingErrors::test_analyze_rule_performance_json_errors PASSED [ 64%]
tests/test_reporter_coverage.py::TestJsonParsingErrors::test_analyze_strategy_performance_json_errors PASSED [ 65%]
tests/test_reporter_coverage.py::TestDataProcessingEdgeCases::test_find_signals_empty_rule_stack PASSED [ 65%]
tests/test_reporter_coverage.py::TestDataProcessingEdgeCases::test_find_signals_empty_dataframe PASSED [ 65%]
tests/test_reporter_coverage.py::TestDataProcessingEdgeCases::test_find_signals_rule_function_error PASSED [ 66%]
tests/test_reporter_coverage.py::TestDataProcessingEdgeCases::test_identify_new_signals_empty_price_data PASSED [ 66%]
tests/test_reporter_coverage.py::TestDataProcessingEdgeCases::test_identify_new_signals_non_list_rule_stack PASSED [ 66%]
tests/test_reporter_coverage.py::TestFileIOErrors::test_generate_daily_report_file_write_error PASSED [ 66%]
tests/test_reporter_coverage.py::TestFileIOErrors::test_generate_daily_report_directory_creation_error PASSED [ 67%]
tests/test_reporter_coverage.py::TestConfigurationEdgeCases::test_identify_new_signals_no_hold_period PASSED [ 67%]
tests/test_reporter_coverage.py::TestConfigurationEdgeCases::test_process_open_positions_nifty_data_error PASSED [ 67%]
tests/test_reporter_coverage.py::TestExitConditionEdgeCases::test_check_exit_conditions_rule_function_not_found PASSED [ 67%]
tests/test_reporter_coverage.py::TestExitConditionEdgeCases::test_check_exit_conditions_rule_execution_error PASSED [ 68%]
tests/test_reporter_coverage.py::TestExitConditionEdgeCases::test_check_exit_conditions_dict_vs_object_params PASSED [ 68%]
tests/test_reporter_coverage.py::TestCSVFormattingEdgeCases::test_format_strategy_analysis_csv_empty_data PASSED [ 68%]
tests/test_reporter_coverage.py::TestCSVFormattingEdgeCases::test_format_strategy_analysis_csv_none_values PASSED [ 69%]
tests/test_reporter_coverage.py::TestCSVFormattingEdgeCases::test_format_strategy_analysis_csv_special_characters PASSED [ 69%]
tests/test_reporter_coverage.py::TestPositionProcessingEdgeCases::test_process_open_positions_zero_entry_price PASSED [ 69%]
tests/test_reporter_coverage.py::TestPositionProcessingEdgeCases::test_process_open_positions_stale_data_logging PASSED [ 69%]
tests/test_reporter_coverage.py::TestPositionProcessingEdgeCases::test_process_open_positions_exception_handling PASSED [ 70%]
tests/test_reporter_coverage.py::TestAnalysisFunctionEdgeCases::test_analyze_rule_performance_malformed_rule_defs PASSED [ 70%]
tests/test_reporter_coverage.py::TestAnalysisFunctionEdgeCases::test_analyze_strategy_performance_aggregated_empty_records PASSED [ 70%]
tests/test_reporter_coverage.py::TestAnalysisFunctionEdgeCases::test_analyze_strategy_performance_aggregated_config_parsing_error PASSED [ 71%]
tests/test_reporter_coverage.py::TestAdditionalCoverageTargets::test_fetch_best_strategies_no_strategies_above_threshold PASSED [ 71%]
tests/test_reporter_coverage.py::TestAdditionalCoverageTargets::test_fetch_best_strategies_unexpected_error PASSED [ 71%]
tests/test_reporter_coverage.py::TestAdditionalCoverageTargets::test_identify_new_signals_no_strategies_found PASSED [ 71%]
tests/test_reporter_coverage.py::TestAdditionalCoverageTargets::test_identify_new_signals_strategy_processing_exception PASSED [ 72%]
tests/test_reporter_coverage.py::TestAdditionalCoverageTargets::test_generate_daily_report_comprehensive_flow PASSED [ 72%]
tests/test_reporter_coverage.py::TestAdditionalCoverageTargets::test_check_exit_conditions_stop_loss_trigger PASSED [ 72%]
tests/test_reporter_coverage.py::TestAdditionalCoverageTargets::test_process_open_positions_successful_processing PASSED [ 73%]
tests/test_reporter_data_issues.py::TestRuleDefAttributeError::test_check_exit_conditions_with_ruledef_objects PASSED [ 73%]
tests/test_reporter_data_issues.py::TestRuleDefAttributeError::test_check_exit_conditions_with_dict_objects PASSED [ 73%]
tests/test_reporter_data_issues.py::TestRuleDefAttributeError::test_check_exit_conditions_mixed_types PASSED [ 73%]
tests/test_reporter_data_issues.py::TestStaleDataHandling::test_check_exit_conditions_handles_stale_data_gracefully PASSED [ 74%]
tests/test_reporter_data_issues.py::TestStaleDataHandling::test_format_open_positions_with_stale_data_info PASSED [ 74%]
tests/test_reporter_data_issues.py::TestDataAvailabilityEdgeCases::test_check_exit_conditions_with_complex_ruledef_params PASSED [ 74%]
tests/test_reporter_data_issues.py::TestDataAvailabilityEdgeCases::test_format_positions_with_missing_data_fields PASSED [ 75%]
tests/test_reporter_data_issues.py::TestDataAvailabilityEdgeCases::test_malformed_rule_stack_resilience PASSED [ 75%]
tests/test_reporter_data_issues.py::TestPriceCalculationAccuracy::test_return_percentage_calculation PASSED [ 75%]
tests/test_reporter_data_issues.py::TestPriceCalculationAccuracy::test_negative_return_calculation PASSED [ 75%]
tests/test_reporter_data_issues.py::TestPriceCalculationAccuracy::test_zero_entry_price_handling PASSED [ 76%]
tests/test_rule_funcs.py::TestSMACrossover::test_valid_crossover_signal PASSED [ 76%]
tests/test_rule_funcs.py::TestSMACrossover::test_insufficient_data PASSED [ 76%]
tests/test_rule_funcs.py::TestSMACrossover::test_invalid_periods PASSED  [ 77%]
tests/test_rule_funcs.py::TestCalculateRSI::test_rsi_calculation PASSED  [ 77%]
tests/test_rule_funcs.py::TestCalculateRSI::test_rsi_insufficient_data PASSED [ 77%]
tests/test_rule_funcs.py::TestRSIOversold::test_oversold_signal_generation PASSED [ 77%]
tests/test_rule_funcs.py::TestRSIOversold::test_insufficient_data_rsi PASSED [ 78%]
tests/test_rule_funcs.py::TestEMACrossover::test_ema_crossover_signal PASSED [ 78%]
tests/test_rule_funcs.py::TestEdgeCases::test_empty_dataframe PASSED     [ 78%]
tests/test_rule_funcs.py::TestEdgeCases::test_single_price_data PASSED   [ 79%]
tests/test_rule_funcs.py::TestEdgeCases::test_nan_price_data PASSED      [ 79%]
tests/test_rule_funcs.py::TestIntegration::test_all_rules_with_real_data PASSED [ 79%]
tests/test_rule_funcs.py::TestVolumeSpike::test_volume_spike_detection PASSED [ 79%]
tests/test_rule_funcs.py::TestVolumeSpike::test_volume_spike_insufficient_data PASSED [ 80%]
tests/test_rule_funcs.py::TestVolumeSpike::test_volume_spike_invalid_params PASSED [ 80%]
tests/test_rule_funcs.py::TestVolumeSpike::test_volume_spike_missing_columns PASSED [ 80%]
tests/test_rule_funcs.py::TestHammerPattern::test_hammer_pattern_detection PASSED [ 81%]
tests/test_rule_funcs.py::TestHammerPattern::test_hammer_pattern_empty_data PASSED [ 81%]
tests/test_rule_funcs.py::TestHammerPattern::test_hammer_pattern_invalid_params PASSED [ 81%]
tests/test_rule_funcs.py::TestHammerPattern::test_hammer_pattern_missing_columns PASSED [ 81%]
tests/test_rule_funcs.py::TestEngulfingPattern::test_engulfing_pattern_detection PASSED [ 82%]
tests/test_rule_funcs.py::TestEngulfingPattern::test_engulfing_pattern_insufficient_data PASSED [ 82%]
tests/test_rule_funcs.py::TestEngulfingPattern::test_engulfing_pattern_invalid_params PASSED [ 82%]
tests/test_rule_funcs.py::TestEngulfingPattern::test_engulfing_pattern_missing_columns PASSED [ 83%]
tests/test_rule_funcs.py::TestMACDCrossover::test_macd_crossover_signal PASSED [ 83%]
tests/test_rule_funcs.py::TestMACDCrossover::test_macd_crossover_insufficient_data PASSED [ 83%]
tests/test_rule_funcs.py::TestMACDCrossover::test_macd_crossover_invalid_params PASSED [ 83%]
tests/test_rule_funcs.py::TestMACDCrossover::test_macd_crossover_missing_columns PASSED [ 84%]
tests/test_rule_funcs.py::TestBollingerSqueeze::test_bollinger_squeeze_signal PASSED [ 84%]
tests/test_rule_funcs.py::TestBollingerSqueeze::test_bollinger_squeeze_insufficient_data PASSED [ 84%]
tests/test_rule_funcs.py::TestBollingerSqueeze::test_bollinger_squeeze_invalid_params PASSED [ 84%]
tests/test_rule_funcs.py::TestBollingerSqueeze::test_bollinger_squeeze_missing_columns PASSED [ 85%]
tests/test_rule_funcs.py::TestNewRulesIntegration::test_all_new_rules_with_sample_data PASSED [ 85%]
tests/test_rule_funcs.py::test_sma_cross_under_basic PASSED              [ 85%]
tests/test_rule_funcs.py::test_sma_cross_under_parameter_validation PASSED [ 86%]
tests/test_rule_funcs.py::test_stop_loss_pct_validation PASSED           [ 86%]
tests/test_rule_funcs.py::test_take_profit_pct_validation PASSED         [ 86%]
tests/test_rule_funcs.py::test_sma_cross_under_insufficient_data PASSED  [ 86%]
tests/test_rule_funcs.py::test_calculate_atr_basic PASSED                [ 87%]
tests/test_rule_funcs.py::test_calculate_atr_mathematical_accuracy PASSED [ 87%]
tests/test_rule_funcs.py::test_calculate_atr_insufficient_data PASSED    [ 87%]
tests/test_rule_funcs.py::test_calculate_atr_missing_columns PASSED      [ 88%]
tests/test_rule_funcs.py::test_calculate_atr_invalid_period PASSED       [ 88%]
tests/test_rule_funcs.py::test_stop_loss_atr_basic PASSED                [ 88%]
tests/test_rule_funcs.py::test_stop_loss_atr_not_triggered PASSED        [ 88%]
tests/test_rule_funcs.py::test_stop_loss_atr_invalid_params PASSED       [ 89%]
tests/test_rule_funcs.py::test_stop_loss_atr_insufficient_data PASSED    [ 89%]
tests/test_rule_funcs.py::test_take_profit_atr_basic PASSED              [ 89%]
tests/test_rule_funcs.py::test_take_profit_atr_not_triggered PASSED      [ 90%]
tests/test_rule_funcs.py::test_take_profit_atr_invalid_params PASSED     [ 90%]
tests/test_rule_funcs.py::test_take_profit_atr_insufficient_data PASSED  [ 90%]
tests/test_rule_funcs.py::test_atr_functions_empty_data PASSED           [ 90%]
tests/test_rule_funcs.py::test_atr_consistency_across_functions PASSED   [ 91%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_successful_fetch_basic PASSED [ 91%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_successful_fetch_with_freeze_date PASSED [ 91%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_multiindex_columns_handling PASSED [ 92%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_tuple_columns_handling PASSED [ 92%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_empty_dataframe_first_attempt_success_second PASSED [ 92%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_empty_dataframe_all_attempts PASSED [ 92%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_missing_required_columns PASSED [ 93%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_yftzmissingerror_retry_then_success PASSED [ 93%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_yftzmissingerror_all_attempts_fail PASSED [ 93%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_timeout_error_retry_logic PASSED [ 94%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_connection_error_retry_logic PASSED [ 94%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_404_error_no_retry PASSED [ 94%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_delisted_error_no_retry PASSED [ 94%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_generic_error_no_retry PASSED [ 95%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_data_type_conversion PASSED [ 95%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_invalid_numeric_data_handling PASSED [ 95%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_exponential_backoff_delays PASSED [ 96%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_max_retries_reached PASSED [ 96%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_different_years_parameter PASSED [ 96%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_progress_parameter_disabled PASSED [ 96%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_auto_adjust_parameter PASSED [ 97%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_logger_import_and_usage PASSED [ 97%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_time_import_and_usage PASSED [ 97%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_column_standardization_edge_cases PASSED [ 98%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_return_none_final_attempt PASSED [ 98%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_function_signature_and_defaults PASSED [ 98%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_coverage_all_error_classification_branches PASSED [ 98%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_final_return_none_path PASSED [ 99%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_unreachable_return_none_coverage PASSED [ 99%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_theoretical_unreachable_path PASSED [ 99%]
tests/test_yfinance_adapter.py::TestFetchSymbolData::test_coverage_summary PASSED [100%]

================================== FAILURES ===================================
____ TestMigrateStrategiesTableV2EdgeCases.test_migrate_v2_error_handling _____

self = <tests.test_persistence.TestMigrateStrategiesTableV2EdgeCases object at 0x0000020FE29A3C20>
temp_db_path = WindowsPath('C:/Users/user/AppData/Local/Temp/pytest-of-user/pytest-736/test_migrate_v2_error_handling0/test.db')

    def test_migrate_v2_error_handling(self, temp_db_path: Path):
        """Test migration error handling."""
        from kiss_signal import persistence
        from unittest.mock import patch
    
        # Create a corrupted database scenario
        with sqlite3.connect(str(temp_db_path)) as conn:
            conn.execute("CREATE TABLE strategies (id INTEGER);")  # Minimal table
            conn.execute("PRAGMA user_version = 1;")
            conn.commit()
    
        # Mock an error during migration
        with patch('sqlite3.connect') as mock_connect:
            mock_conn = MagicMock()
            mock_conn.execute.side_effect = [
                MagicMock(),  # First call (version check) succeeds
                sqlite3.Error("Migration failed")  # Second call fails
            ]
            mock_connect.return_value.__enter__.return_value = mock_conn
    
            with pytest.raises(sqlite3.Error):
>               persistence.migrate_strategies_table_v2(temp_db_path)

tests\test_persistence.py:1284: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

db_path = WindowsPath('C:/Users/user/AppData/Local/Temp/pytest-of-user/pytest-736/test_migrate_v2_error_handling0/test.db')

    def migrate_strategies_table_v2(db_path: Path) -> None:
        """Migrates the strategies table to version 2 by adding new columns.
    
        Args:
            db_path: Path to the SQLite database file
    
        Raises:
            sqlite3.Error: If migration fails
        """
        logger.info(f"Starting migration of strategies table at {db_path}")
        try:
            with sqlite3.connect(str(db_path)) as conn:
                # Check current schema version
                current_version = conn.execute("PRAGMA user_version;").fetchone()[0]
                logger.info(f"Current database version: {current_version}")
    
                # If already at latest version, do nothing
>               if current_version >= 2:
                   ^^^^^^^^^^^^^^^^^^^^
E               TypeError: '>=' not supported between instances of 'MagicMock' and 'int'

src\kiss_signal\persistence.py:351: TypeError
---------------------------- Captured stdout call -----------------------------
                      INFO     Starting migration of strategies table at       
                               C:\Users\user\AppData\Local\Temp\pytest-of-user\
                               pytest-736\test_migrate_v2_error_handling0\test.
                               db                                              
                      INFO     Current database version: <MagicMock            
                               name='mock.fetchone().__getitem__()'            
                               id='2267287832480'>                             
------------------------------ Captured log call ------------------------------
INFO     kiss_signal.persistence:persistence.py:343 Starting migration of strategies table at C:\Users\user\AppData\Local\Temp\pytest-of-user\pytest-736\test_migrate_v2_error_handling0\test.db
INFO     kiss_signal.persistence:persistence.py:348 Current database version: <MagicMock name='mock.fetchone().__getitem__()' id='2267287832480'>
_ TestAdditionalPersistenceFunctions.test_close_positions_transaction_rollback _

db_path = WindowsPath('C:/Users/user/AppData/Local/Temp/pytest-of-user/pytest-736/test_close_positions_transacti0/test.db')
closed_positions = [{'days_held': 5, 'exit_date': '2025-01-20', 'exit_price': 'invalid_price', 'exit_reason': 'test', ...}]

    def close_positions_batch(db_path: Path, closed_positions: List[Dict[str, Any]]) -> None:
        """Updates positions to 'CLOSED' and records exit details."""
        if not closed_positions:
            return
    
        update_sql = """
        UPDATE positions
        SET status = 'CLOSED', exit_date = ?, exit_price = ?, final_return_pct = ?,
            final_nifty_return_pct = ?, days_held = ?, exit_reason = ?
        WHERE id = ?;
        """
    
        with sqlite3.connect(str(db_path)) as conn:
            cursor = conn.cursor()
            cursor.execute("BEGIN TRANSACTION")
            try:
                for pos in closed_positions:
>                   cursor.execute(update_sql, (
                        pos.get('exit_date'), pos.get('exit_price'), pos.get('final_return_pct'),
                        pos.get('final_nifty_return_pct'), pos.get('days_held'), pos.get('exit_reason'),
                        pos['id']
                    ))

src\kiss_signal\persistence.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\user\AppData\Local\Programs\Python\Python312\Lib\unittest\mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\user\AppData\Local\Programs\Python\Python312\Lib\unittest\mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <MagicMock name='connect().__enter__().cursor().execute' id='2267319106112'>
args = ("\n    UPDATE positions\n    SET status = 'CLOSED', exit_date = ?, exit_price = ?, final_return_pct = ?, \n        fi..., days_held = ?, exit_reason = ?\n    WHERE id = ?;\n    ", ('2025-01-20', 'invalid_price', 10.0, 5.0, 5, 'test', ...))
kwargs = {}, effect = <list_iterator object at 0x0000020FE4E47D00>
result = Error('Update failed')

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
                result = next(effect)
                if _is_exception(result):
>                   raise result
E                   sqlite3.Error: Update failed

C:\Users\user\AppData\Local\Programs\Python\Python312\Lib\unittest\mock.py:1202: Error

During handling of the above exception, another exception occurred:

self = <tests.test_persistence.TestAdditionalPersistenceFunctions object at 0x0000020FE29A3E90>
temp_db_path = WindowsPath('C:/Users/user/AppData/Local/Temp/pytest-of-user/pytest-736/test_close_positions_transacti0/test.db')

    def test_close_positions_transaction_rollback(self, temp_db_path: Path):
        """Test close_positions_batch transaction rollback on error."""
        create_database(temp_db_path)
    
        # Add an open position first
        signals = [{'ticker': 'TEST', 'date': '2025-01-15', 'entry_price': 100.0, 'rule_stack_used': '[]'}]
        add_new_positions_from_signals(temp_db_path, signals)
    
        positions = get_open_positions(temp_db_path)
        assert len(positions) == 1
    
        # Try to close with invalid data that will cause an error
        invalid_position = {
            'id': positions[0]['id'],
            'exit_date': '2025-01-20',
            'exit_price': 'invalid_price',  # This should cause an error
            'final_return_pct': 10.0,
            'final_nifty_return_pct': 5.0,
            'days_held': 5,
            'exit_reason': 'test'
        }
    
        from unittest.mock import patch
    
        # Mock sqlite3 to raise an error during UPDATE
        with patch('sqlite3.connect') as mock_connect:
            mock_conn = MagicMock()
            mock_cursor = MagicMock()
            mock_conn.cursor.return_value = mock_cursor
            mock_cursor.execute.side_effect = [
                None,  # BEGIN TRANSACTION
                sqlite3.Error("Update failed")  # UPDATE statement
            ]
            mock_connect.return_value.__enter__.return_value = mock_conn
    
            # This should handle the error gracefully
>           close_positions_batch(temp_db_path, [invalid_position])

tests\test_persistence.py:1326: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\kiss_signal\persistence.py:246: in close_positions_batch
    cursor.execute("ROLLBACK")
C:\Users\user\AppData\Local\Programs\Python\Python312\Lib\unittest\mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\user\AppData\Local\Programs\Python\Python312\Lib\unittest\mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <MagicMock name='connect().__enter__().cursor().execute' id='2267319106112'>
args = ('ROLLBACK',), kwargs = {}
effect = <list_iterator object at 0x0000020FE4E47D00>

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
>               result = next(effect)
                         ^^^^^^^^^^^^
E               StopIteration

C:\Users\user\AppData\Local\Programs\Python\Python312\Lib\unittest\mock.py:1200: StopIteration
---------------------------- Captured stdout call -----------------------------
[2025-07-16 23:42:04] INFO     Creating database at                            
                               C:\Users\user\AppData\Local\Temp\pytest-of-user\
                               pytest-736\test_close_positions_transacti0\test.
                               db                                              
                      INFO     Successfully created database at                
                               C:\Users\user\AppData\Local\Temp\pytest-of-user\
                               pytest-736\test_close_positions_transacti0\test.
                               db                                              
                      INFO     Added new OPEN position for TEST at 100.0.      
                      INFO     Fetched 1 open positions.                       
                      ERROR    Failed to close positions: Update failed        
------------------------------ Captured log call ------------------------------
INFO     kiss_signal.persistence:persistence.py:118 Creating database at C:\Users\user\AppData\Local\Temp\pytest-of-user\pytest-736\test_close_positions_transacti0\test.db
INFO     kiss_signal.persistence:persistence.py:149 Successfully created database at C:\Users\user\AppData\Local\Temp\pytest-of-user\pytest-736\test_close_positions_transacti0\test.db
INFO     kiss_signal.persistence:persistence.py:196 Added new OPEN position for TEST at 100.0.
INFO     kiss_signal.persistence:persistence.py:213 Fetched 1 open positions.
ERROR    kiss_signal.persistence:persistence.py:245 Failed to close positions: Update failed
_ TestAdditionalPersistenceFunctions.test_add_positions_transaction_rollback __

db_path = WindowsPath('C:/Users/user/AppData/Local/Temp/pytest-of-user/pytest-736/test_add_positions_transaction0/test.db')
signals = [{'date': '2025-01-15', 'entry_price': 100.0, 'ticker': 'TEST'}]

    def add_new_positions_from_signals(db_path: Path, signals: List[Dict[str, Any]]) -> None:
        """Adds new buy signals to the positions table with status 'OPEN'."""
        if not signals:
            return
    
        insert_sql = """
        INSERT INTO positions (symbol, entry_date, entry_price, status, rule_stack_used)
        VALUES (?, ?, ?, 'OPEN', ?);
        """
    
        with sqlite3.connect(str(db_path)) as conn:
            cursor = conn.cursor()
            cursor.execute("BEGIN TRANSACTION")
            try:
                open_symbols = {
                    row[0] for row in cursor.execute("SELECT symbol FROM positions WHERE status = 'OPEN'").fetchall()
                }
    
                for signal in signals:
                    symbol = signal['ticker']
                    if symbol in open_symbols:
                        logger.info(f"Skipping new position for {symbol} as one is already open.")
                        continue
    
                    rule_stack_json = signal.get('rule_stack_used', json.dumps([signal.get('rule_stack', 'unknown')]))
    
>                   cursor.execute(insert_sql, (
                        symbol,
                        signal['date'],
                        signal['entry_price'],
                        rule_stack_json
                    ))

src\kiss_signal\persistence.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\user\AppData\Local\Programs\Python\Python312\Lib\unittest\mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\user\AppData\Local\Programs\Python\Python312\Lib\unittest\mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <MagicMock name='connect().__enter__().cursor().execute' id='2267290861792'>
args = ("\n    INSERT INTO positions (symbol, entry_date, entry_price, status, rule_stack_used)\n    VALUES (?, ?, ?, 'OPEN', ?);\n    ", ('TEST', '2025-01-15', 100.0, '["unknown"]'))
kwargs = {}, effect = <list_iterator object at 0x0000020FE51118D0>
result = Error('Insert failed')

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
                result = next(effect)
                if _is_exception(result):
>                   raise result
E                   sqlite3.Error: Insert failed

C:\Users\user\AppData\Local\Programs\Python\Python312\Lib\unittest\mock.py:1202: Error

During handling of the above exception, another exception occurred:

self = <tests.test_persistence.TestAdditionalPersistenceFunctions object at 0x0000020FE29E4140>
temp_db_path = WindowsPath('C:/Users/user/AppData/Local/Temp/pytest-of-user/pytest-736/test_add_positions_transaction0/test.db')

    def test_add_positions_transaction_rollback(self, temp_db_path: Path):
        """Test add_new_positions_from_signals transaction rollback on error."""
        create_database(temp_db_path)
    
        signals = [{'ticker': 'TEST', 'date': '2025-01-15', 'entry_price': 100.0}]
    
        from unittest.mock import patch
    
        with patch('sqlite3.connect') as mock_connect:
            mock_conn = MagicMock()
            mock_cursor = MagicMock()
            mock_conn.cursor.return_value = mock_cursor
            mock_cursor.execute.side_effect = [
                None,  # BEGIN TRANSACTION
                MagicMock(),  # SELECT for open_symbols
                sqlite3.Error("Insert failed")  # INSERT statement
            ]
            mock_cursor.fetchall.return_value = []  # No existing open positions
            mock_connect.return_value.__enter__.return_value = mock_conn
    
            # This should handle the error gracefully
>           add_new_positions_from_signals(temp_db_path, signals)

tests\test_persistence.py:1352: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\kiss_signal\persistence.py:201: in add_new_positions_from_signals
    cursor.execute("ROLLBACK")
C:\Users\user\AppData\Local\Programs\Python\Python312\Lib\unittest\mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\user\AppData\Local\Programs\Python\Python312\Lib\unittest\mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <MagicMock name='connect().__enter__().cursor().execute' id='2267290861792'>
args = ('ROLLBACK',), kwargs = {}
effect = <list_iterator object at 0x0000020FE51118D0>

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
>               result = next(effect)
                         ^^^^^^^^^^^^
E               StopIteration

C:\Users\user\AppData\Local\Programs\Python\Python312\Lib\unittest\mock.py:1200: StopIteration
---------------------------- Captured stdout call -----------------------------
[2025-07-16 23:42:05] INFO     Creating database at                            
                               C:\Users\user\AppData\Local\Temp\pytest-of-user\
                               pytest-736\test_add_positions_transaction0\test.
                               db                                              
                      INFO     Successfully created database at                
                               C:\Users\user\AppData\Local\Temp\pytest-of-user\
                               pytest-736\test_add_positions_transaction0\test.
                               db                                              
                      ERROR    Failed to add new positions: Insert failed      
------------------------------ Captured log call ------------------------------
INFO     kiss_signal.persistence:persistence.py:118 Creating database at C:\Users\user\AppData\Local\Temp\pytest-of-user\pytest-736\test_add_positions_transaction0\test.db
INFO     kiss_signal.persistence:persistence.py:149 Successfully created database at C:\Users\user\AppData\Local\Temp\pytest-of-user\pytest-736\test_add_positions_transaction0\test.db
ERROR    kiss_signal.persistence:persistence.py:200 Failed to add new positions: Insert failed
=============================== tests coverage ================================
______________ coverage: platform win32, python 3.12.10-final-0 _______________

Name                                   Stmts   Miss  Cover
----------------------------------------------------------
src\kiss_signal\__init__.py                4      0   100%
src\kiss_signal\adapters\__init__.py       1      0   100%
src\kiss_signal\adapters\yfinance.py      50      0   100%
src\kiss_signal\backtester.py            200     20    90%
src\kiss_signal\cli.py                   248      9    96%
src\kiss_signal\config.py                 86      3    97%
src\kiss_signal\data.py                  166     15    91%
src\kiss_signal\performance.py            41      0   100%
src\kiss_signal\persistence.py           239     14    94%
src\kiss_signal\reporter.py              385     23    94%
src\kiss_signal\rules.py                 242     12    95%
----------------------------------------------------------
TOTAL                                   1662     96    94%
=========================== short test summary info ===========================
FAILED tests/test_persistence.py::TestMigrateStrategiesTableV2EdgeCases::test_migrate_v2_error_handling
FAILED tests/test_persistence.py::TestAdditionalPersistenceFunctions::test_close_positions_transaction_rollback
FAILED tests/test_persistence.py::TestAdditionalPersistenceFunctions::test_add_positions_transaction_rollback
================== 3 failed, 350 passed in 275.89s (0:04:35) ==================
